{"version":3,"sources":["Board.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","setSymbol","bind","getComputerChoice","box","this","winner","board","newBoard","updateBoard","setTimeout","defineWinner","arr","newArr","forEach","value","index","push","randomBoxIndex","Math","floor","random","length","randomBox","cells","map","id","className","key","onClick","rowNum","slice","React","Component","App","state","winResult","setState","el","youWon","computerWon","resetFunction","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a448f7a.chunk.js","sourcesContent":["import React from 'react';\nimport './Board.css';\n\nconst userSymbol ='X';\nconst compSymbol = 'O';\n\nexport class Board extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.setSymbol = this.setSymbol.bind(this);\n    this.getComputerChoice = this.getComputerChoice.bind(this);\n  }\n     \n  setSymbol(box) {\n    if (this.props.winner){\n      return\n    }\n    if(this.props.board[box] !== ''){\n      return;\n    }\n    const newBoard = [ ...this.props.board ];\n    newBoard[box] = userSymbol;\n    this.props.updateBoard(newBoard);\n    setTimeout(() => this.getComputerChoice(), 100);\n  }\n\n  getComputerChoice(){\n    if (this.props.defineWinner()) {\n      return\n    }\n    let arr = this.props.board;\n    let newArr = [];\n    arr.forEach((value, index) => {\n      if(value === ''){\n        newArr.push(index)\n      }\n    })\n    const randomBoxIndex = Math.floor(Math.random() * newArr.length);\n    const randomBox = newArr[randomBoxIndex];\n    const newBoard = [ ...this.props.board ];\n    newBoard[randomBox] = compSymbol;\n\n    this.props.updateBoard(newBoard);\n    this.props.defineWinner();\n  }\n\n\n  render() {\n    const cells = [0,1,2,3,4,5,6,7,8].map((id) => (\n      <div className=\"box\" key={id} onClick={() => this.setSymbol(id)}>\n        {this.props.board[id]}\n      </div>\n    ));\n    return (\n    <div id=\"board\">\n      {[0,1,2].map((rowNum) => {\n        return (\n          <div className=\"row\" key={rowNum}>\n            {cells.slice(rowNum * 3, rowNum * 3 + 3)}\n          </div>\n        );  \n      })}\n    </div>    \n    )\n  }\n}\n\n","import React from 'react';\nimport './App.css';\nimport { Board } from './Board';\n\nconst userSymbol ='X';\nconst compSymbol = 'O';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      board: ['','','','','','','','',''],\n      winner: false,\n      winResult:''\n    }\n    this.updateBoard = this.updateBoard.bind(this);\n    this.defineWinner = this.defineWinner.bind(this);\n  }\n\n  updateBoard(newBoard){\n    this.setState({\n      board: newBoard\n    })\n  }\n\n  defineWinner(){\n    const winIndices = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ]\n\n    let arr = this.state.board;\n    let winner = false;\n    winIndices.forEach((el) => {\n      if (arr[el[0]] !== '' && arr[el[0]] === arr[el[1]] && arr[el[1]] === arr[el[2]]){\n        if(arr[el[0]] === userSymbol){\n          this.setState({ winResult: 'You', winner:true})\n          winner = true;\n        } else if (arr[el[0]] === compSymbol) {\n          this.setState({ winResult: 'Computer', winner:true })\n          winner = true;\n        }\n      }\n    })\n    return winner;\n  }\n\n  resetFunction(){\n    this.setState({\n      board: ['','','','','','','','',''],\n      winner: false,\n      winResult:''\n    })\n  }\n\n  render() {\n    const youWon = this.state.winResult === 'You';\n    const computerWon = this.state.winResult === 'Computer';\n\n    return(\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Tick, tack, toe</h1>\n            <p>User (X) starts. The first one to make three in a line wins.</p>\n        </header>\n\n        <div className=\"board-div\">\n          <Board winner={this.state.winner} \n                updateBoard={this.updateBoard}\n                board={this.state.board}\n                defineWinner={this.defineWinner}\n          />\n          <div className='result-div'>\n            {youWon && (\n            <p>{this.state.winResult} win!</p> )}\n            {computerWon && (\n            <p>{this.state.winResult} wins :(</p> )}\n          </div>\n\n          <button className=\"reset\" onClick={() => this.resetFunction()}>Reset</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}